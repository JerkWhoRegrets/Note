import java.util.*;

/**
 * Console Tic-Tac-Toe with AI
 * Demonstrates arrays, algorithms, recursion (minimax), and console I/O.
 */
public class TicTacToeApp {

    static class Board {
        private char[][] grid = new char[3][3];

        public Board() {
            for (int i = 0; i < 3; i++) {
                Arrays.fill(grid[i], ' ');
            }
        }

        public boolean place(int row, int col, char player) {
            if (grid[row][col] == ' ') {
                grid[row][col] = player;
                return true;
            }
            return false;
        }

        public boolean isFull() {
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    if (grid[i][j] == ' ') return false;
            return true;
        }

        public boolean hasWon(char player) {
            for (int i = 0; i < 3; i++) {
                if (grid[i][0] == player && grid[i][1] == player && grid[i][2] == player) return true;
                if (grid[0][i] == player && grid[1][i] == player && grid[2][i] == player) return true;
            }
            if (grid[0][0] == player && grid[1][1] == player && grid[2][2] == player) return true;
            if (grid[0][2] == player && grid[1][1] == player && grid[2][0] == player) return true;
            return false;
        }

        public void print() {
            System.out.println("  0 1 2");
            for (int i = 0; i < 3; i++) {
                System.out.print(i + " ");
                for (int j = 0; j < 3; j++) {
                    System.out.print(grid[i][j]);
                    if (j < 2) System.out.print("|");
                }
                System.out.println();
                if (i < 2) System.out.println("  -+-+-");
            }
        }

        public char[][] copyGrid() {
            char[][] copy = new char[3][3];
            for (int i = 0; i < 3; i++) {
                copy[i] = Arrays.copyOf(grid[i], 3);
            }
            return copy;
        }
    }

    static class Game {
        private Board board = new Board();
        private char currentPlayer = 'X';
        private boolean singlePlayer;
        private Scanner sc = new Scanner(System.in);

        public Game(boolean singlePlayer) {
            this.singlePlayer = singlePlayer;
        }

        public void play() {
            while (true) {
                board.print();
                if (board.hasWon('X')) {
                    System.out.println("X wins!");
                    break;
                }
                if (board.hasWon('O')) {
                    System.out.println("O wins!");
                    break;
                }
                if (board.isFull()) {
                    System.out.println("It's a draw!");
                    break;
                }

                if (singlePlayer && currentPlayer == 'O') {
                    System.out.println("AI's turn...");
                    int[] move = findBestMove(board.copyGrid(), 'O');
                    board.place(move[0], move[1], 'O');
                } else {
                    System.out.println("Player " + currentPlayer + "'s turn.");
                    int row, col;
                    while (true) {
                        System.out.print("Enter row (0-2): ");
                        row = sc.nextInt();
                        System.out.print("Enter col (0-2): ");
                        col = sc.nextInt();
                        if (row >= 0 && row < 3 && col >= 0 && col < 3 && board.place(row, col, currentPlayer)) {
                            break;
                        } else {
                            System.out.println("Invalid move, try again.");
                        }
                    }
                }
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            }
        }

        // Minimax AI
        private int evaluate(char[][] b) {
            for (int i = 0; i < 3; i++) {
                if (b[i][0] == b[i][1] && b[i][1] == b[i][2]) {
                    if (b[i][0] == 'O') return +10;
                    if (b[i][0] == 'X') return -10;
                }
                if (b[0][i] == b[1][i] && b[1][i] == b[2][i]) {
                    if (b[0][i] == 'O') return +10;
                    if (b[0][i] == 'X') return -10;
                }
            }
            if (b[0][0] == b[1][1] && b[1][1] == b[2][2]) {
                if (b[0][0] == 'O') return +10;
                if (b[0][0] == 'X') return -10;
            }
            if (b[0][2] == b[1][1] && b[1][1] == b[2][0]) {
                if (b[0][2] == 'O') return +10;
                if (b[0][2] == 'X') return -10;
            }
            return 0;
        }

        private boolean movesLeft(char[][] b) {
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    if (b[i][j] == ' ') return true;
            return false;
        }

        private int minimax(char[][] b, int depth, boolean isMax) {
            int score = evaluate(b);
            if (score == 10) return score - depth;
            if (score == -10) return score + depth;
            if (!movesLeft(b)) return 0;

            if (isMax) {
                int best = Integer.MIN_VALUE;
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (b[i][j] == ' ') {
                            b[i][j] = 'O';
                            best = Math.max(best, minimax(b, depth + 1, false));
                            b[i][j] = ' ';
                        }
                    }
                }
                return best;
            } else {
                int best = Integer.MAX_VALUE;
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (b[i][j] == ' ') {
                            b[i][j] = 'X';
                            best = Math.min(best, minimax(b, depth + 1, true));
                            b[i][j] = ' ';
                        }
                    }
                }
                return best;
            }
        }

        private int[] findBestMove(char[][] b, char player) {
            int bestVal = Integer.MIN_VALUE;
            int[] bestMove = {-1, -1};
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (b[i][j] == ' ') {
                        b[i][j] = player;
                        int moveVal = minimax(b, 0, false);
                        b[i][j] = ' ';
                        if (moveVal > bestVal) {
                            bestMove[0] = i;
                            bestMove[1] = j;
                            bestVal = moveVal;
                        }
                    }
                }
            }
            return bestMove;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Tic-Tac-Toe Game");
        System.out.println("1. Single Player");
        System.out.println("2. Two Player");
        System.out.print("Choose: ");
        String choice = sc.nextLine();
        boolean single = choice.equals("1");
        Game g = new Game(single);
        g.play();
        sc.close();
    }
}
