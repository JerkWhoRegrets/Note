import java.util.*;

/**
 * Console Library Management System
 * Demonstrates OOP, collections, and console interaction.
 */
public class LibraryApp {

    // --- Book class ---
    static class Book {
        private static int nextId = 1;
        private int id;
        private String title;
        private String author;
        private int year;
        private boolean borrowed;
        private Member borrowedBy;

        public Book(String title, String author, int year) {
            this.id = nextId++;
            this.title = title;
            this.author = author;
            this.year = year;
            this.borrowed = false;
        }

        public int getId() { return id; }
        public String getTitle() { return title; }
        public String getAuthor() { return author; }
        public boolean isBorrowed() { return borrowed; }
        public Member getBorrowedBy() { return borrowedBy; }

        public void borrow(Member m) {
            borrowed = true;
            borrowedBy = m;
        }

        public void giveBack() {
            borrowed = false;
            borrowedBy = null;
        }

        @Override
        public String toString() {
            String status = borrowed ? "Borrowed by " + borrowedBy.getName() : "Available";
            return String.format("Book[%d] \"%s\" by %s (%d) - %s", id, title, author, year, status);
        }
    }

    // --- Member class ---
    static class Member {
        private static int nextId = 1001;
        private int id;
        private String name;

        public Member(String name) {
            this.id = nextId++;
            this.name = name;
        }

        public int getId() { return id; }
        public String getName() { return name; }

        @Override
        public String toString() {
            return String.format("Member[%d] %s", id, name);
        }
    }

    // --- Library class ---
    static class Library {
        private Map<Integer, Book> books = new HashMap<>();
        private Map<Integer, Member> members = new HashMap<>();

        public Book addBook(String title, String author, int year) {
            Book b = new Book(title, author, year);
            books.put(b.getId(), b);
            return b;
        }

        public Member addMember(String name) {
            Member m = new Member(name);
            members.put(m.getId(), m);
            return m;
        }

        public Book findBook(int id) { return books.get(id); }
        public Member findMember(int id) { return members.get(id); }

        public void listBooks() {
            if (books.isEmpty()) {
                System.out.println("No books in library.");
                return;
            }
            for (Book b : books.values()) {
                System.out.println(b);
            }
        }

        public void listMembers() {
            if (members.isEmpty()) {
                System.out.println("No members registered.");
                return;
            }
            for (Member m : members.values()) {
                System.out.println(m);
            }
        }

        public void searchBooks(String keyword) {
            boolean found = false;
            for (Book b : books.values()) {
                if (b.getTitle().toLowerCase().contains(keyword.toLowerCase()) ||
                    b.getAuthor().toLowerCase().contains(keyword.toLowerCase())) {
                    System.out.println(b);
                    found = true;
                }
            }
            if (!found) System.out.println("No books found with that keyword.");
        }

        public boolean borrowBook(int bookId, int memberId) {
            Book b = books.get(bookId);
            Member m = members.get(memberId);
            if (b == null || m == null) return false;
            if (b.isBorrowed()) return false;
            b.borrow(m);
            return true;
        }

        public boolean returnBook(int bookId) {
            Book b = books.get(bookId);
            if (b == null || !b.isBorrowed()) return false;
            b.giveBack();
            return true;
        }
    }

    // --- Menu UI ---
    static class Menu {
        private Library lib = new Library();
        private Scanner sc = new Scanner(System.in);

        public void run() {
            while (true) {
                System.out.println("\n=== Library System Menu ===");
                System.out.println("1. Add Book");
                System.out.println("2. Add Member");
                System.out.println("3. List Books");
                System.out.println("4. List Members");
                System.out.println("5. Search Books");
                System.out.println("6. Borrow Book");
                System.out.println("7. Return Book");
                System.out.println("0. Exit");
                System.out.print("Choose: ");

                String input = sc.nextLine();
                switch (input) {
                    case "1": addBook(); break;
                    case "2": addMember(); break;
                    case "3": lib.listBooks(); break;
                    case "4": lib.listMembers(); break;
                    case "5": searchBooks(); break;
                    case "6": borrowBook(); break;
                    case "7": returnBook(); break;
                    case "0": 
                        System.out.println("Goodbye!");
                        return;
                    default:
                        System.out.println("Invalid option.");
                }
            }
        }

        private void addBook() {
            System.out.print("Enter title: ");
            String title = sc.nextLine();
            System.out.print("Enter author: ");
            String author = sc.nextLine();
            System.out.print("Enter year: ");
            int year = Integer.parseInt(sc.nextLine());
            Book b = lib.addBook(title, author, year);
            System.out.println("Added: " + b);
        }

        private void addMember() {
            System.out.print("Enter member name: ");
            String name = sc.nextLine();
            Member m = lib.addMember(name);
            System.out.println("Added: " + m);
        }

        private void searchBooks() {
            System.out.print("Enter keyword: ");
            String kw = sc.nextLine();
            lib.searchBooks(kw);
        }

        private void borrowBook() {
            System.out.print("Enter book ID: ");
            int bookId = Integer.parseInt(sc.nextLine());
            System.out.print("Enter member ID: ");
            int memberId = Integer.parseInt(sc.nextLine());
            if (lib.borrowBook(bookId, memberId)) {
                System.out.println("Book borrowed successfully.");
            } else {
                System.out.println("Borrow failed.");
            }
        }

        private void returnBook() {
            System.out.print("Enter book ID: ");
            int bookId = Integer.parseInt(sc.nextLine());
            if (lib.returnBook(bookId)) {
                System.out.println("Book returned.");
            } else {
                System.out.println("Return failed.");
            }
        }
    }

    public static void main(String[] args) {
        new Menu().run();
    }
}
